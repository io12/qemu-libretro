.PHONY: all

all:
	if [ $(platform) = unix ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& pip install tomli \
		&& EXTRA_PATH= \
		&& CORE_SUFFIX=libretro \
		&& LIB_EXT=so \
		&& EXTRA_CONFIGURE_ARGS=; \
	elif [ $(platform) = android-arm ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& apt-get -y install ninja-build \
		&& pip install tomli \
		&& EXTRA_PATH=$(ANDROID_NDK_LLVM)/bin \
		&& CORE_SUFFIX=libretro_android \
		&& LIB_EXT=so \
		&& EXTRA_CONFIGURE_ARGS="--cross-prefix=arm-linux-androideabi- --cc=armv7a-linux-androideabi30-clang --host-cc=gcc --cxx=armv7a-linux-androideabi30-clang++"; \
	elif [ $(platform) = android-arm64 ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& apt-get -y install ninja-build \
		&& pip install tomli \
		&& EXTRA_PATH=$(ANDROID_NDK_LLVM)/bin \
		&& CORE_SUFFIX=libretro_android \
		&& LIB_EXT=so \
		&& EXTRA_CONFIGURE_ARGS="--cross-prefix=aarch64-linux-android- --cc=aarch64-linux-android30-clang --host-cc=gcc --cxx=aarch64-linux-android30-clang++"; \
	elif [ $(platform) = android-x86 ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& apt-get -y install ninja-build \
		&& pip install tomli \
		&& EXTRA_PATH=$(ANDROID_NDK_LLVM)/bin \
		&& CORE_SUFFIX=libretro_android \
		&& LIB_EXT=so \
		&& EXTRA_CONFIGURE_ARGS="--cross-prefix=i686-linux-android- --cc=i686-linux-android30-clang --host-cc=gcc --cxx=i686-linux-android30-clang++"; \
	elif [ $(platform) = android-x86_64 ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& apt-get -y install ninja-build \
		&& pip install tomli \
		&& EXTRA_PATH=$(ANDROID_NDK_LLVM)/bin \
		&& CORE_SUFFIX=libretro_android \
		&& LIB_EXT=so \
		&& EXTRA_CONFIGURE_ARGS="--cross-prefix=x86_64-linux-android- --cc=x86_64-linux-android30-clang --host-cc=gcc --cxx=x86_64-linux-android30-clang++"; \
	elif [ $(platform) = win64 ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& apt-get -y install python3.8-venv \
		&& python3.8 -m pip install distlib tomli meson \
		&& EXTRA_PATH= \
		&& CORE_SUFFIX=libretro \
		&& LIB_EXT=dll \
		&& EXTRA_CONFIGURE_ARGS="--cross-prefix=x86_64-w64-mingw32.static-"; \
	elif [ $(platform) = win32 ]; then \
		apt-get update \
		&& apt-get -y upgrade \
		&& apt-get -y install python3.8-venv \
		&& python3.8 -m pip install distlib tomli meson \
		&& EXTRA_PATH= \
		&& CORE_SUFFIX=libretro \
		&& LIB_EXT=dll \
		&& EXTRA_CONFIGURE_ARGS="--cross-prefix=i686-w64-mingw32.static-"; \
	elif [ $(platform) = osx ]; then \
		python3 -m pip install --user tomli ninja \
		&& EXTRA_PATH=$$(echo ~/Library/Python/3.*/bin) \
		&& CORE_SUFFIX=libretro \
		&& LIB_EXT=dylib \
		&& EXTRA_CONFIGURE_ARGS=; \
	fi \
		&& (if [ $$(uname -s) = Linux ]; then update-ca-certificates --fresh; fi) \
		&& export SSL_CERT_DIR=/etc/ssl/certs \
		&& export PATH=$$EXTRA_PATH:$$PATH \
		&& (cd zlib && ./configure) \
		&& mkdir build \
		&& cd build \
		&& CFLAGS=-Wno-error ../configure \
			--without-default-features \
			--target-list=i386-softmmu \
			--glib=internal \
			--zlib=internal \
			--disable-pie \
			--disable-fdt \
			--disable-modules \
			--disable-plugins \
			--enable-libretro \
			--audio-drv-list=libretro \
			--disable-sdl \
			$$EXTRA_CONFIGURE_ARGS \
		&& make -j$(NUMPROC) \
		&& cp libqemu-system-i386.$$LIB_EXT ../qemu_$$CORE_SUFFIX.$$LIB_EXT
